
# Generated by CodiumAI
import pygments
from Chaos_game import mark_pixel


import pytest

"""
Code Analysis

Objective:
The objective of the function is to mark a pixel on a given surface with a specified color.

Inputs:
- surface: a pygame surface object
- pos: a tuple representing the position of the pixel to be marked
- pcol: a tuple representing the color to be used for marking the pixel

Flow:
1. Get the color of the pixel at the specified position on the surface
2. Calculate the new color by adding a fraction of the specified color to the current color, ensuring that the color values do not exceed 255
3. Set the color of the pixel at the specified position on the surface to the new color

Outputs:
- None

Additional aspects:
- The function uses the pygame module to manipulate surfaces and colors
- The function modifies the surface object in place, rather than returning a new surface
- The function uses a fraction of the specified color to gradually change the color of the pixel, rather than setting it to the exact specified color
"""



class TestMarkPixel:

    #Tests setting a valid pixel position with a valid color value.  
    def test_mark_pixel_happy(self):
        # Happy path test
        surface = pygame.Surface((800, 800))
        pos = (400, 400)
        pcol = (50, 100, 150)
        expected_color = (55, 110, 165)

        mark_pixel(surface, pos, pcol)

        assert surface.get_at(pos) == expected_color

    #Tests setting a pixel position with a color value that does not exceed 255. 
    def test_mark_pixel_color_limit(self):
        # Happy path test for color limit
        surface = pygame.Surface((800, 800))
        pos = (400, 400)
        pcol = (255, 255, 255)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (255, 255, 255)

    # Tests setting a pixel position outside the surface boundaries. 
    def test_mark_pixel_outside_bounds(self):
        # Edge case test for outside bounds
        surface = pygame.Surface((800, 800))
        pos = (900, 900)
        pcol = (50, 100, 150)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (0, 0, 0)

    # Tests setting a pixel position with negative coordinates. 
    def test_mark_pixel_negative_coords(self):
        # Edge case test for negative coordinates
        surface = pygame.Surface((800, 800))
        pos = (-100, -100)
        pcol = (50, 100, 150)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (0, 0, 0)

    # Tests that the function returns None and modifies the color of the pixel at the specified position. 
    def test_mark_pixel_behavior(self):
        # General behavior test
        surface = pygame.Surface((800, 800))
        pos = (400, 400)
        pcol = (50, 100, 150)
        assert mark_pixel(surface, pos, pcol) is None
        assert surface.get_at(pos) == (55, 110, 165)

    # Tests setting a pixel position with non-integer coordinates. 
    def test_mark_pixel_non_integer_coords(self):
        # Edge case test for non-integer coordinates
        surface = pygame.Surface((800, 800))
        pos = (400.5, 400.5)
        pcol = (50, 100, 150)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (55, 110, 165)