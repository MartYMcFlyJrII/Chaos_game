
# Generated by CodiumAI
import pygments
from Chaos_game import mark_pixel
import pygame 

import pytest

"""
Code Analysis

Objective:
The objective of the "mark_pixel" function is to modify the color of a pixel in a given surface by adding a fraction of a given color to the current color of the pixel.

Inputs:
- surface: a Pygame surface object where the pixel will be marked
- pos: a tuple representing the position of the pixel to be marked
- pcol: a tuple representing the color to be added to the current color of the pixel

Flow:
1. Get the current color of the pixel at the given position in the surface
2. Calculate the new color by adding a fraction of the given color to each color channel of the current color, ensuring that the resulting value is not greater than 255
3. Set the new color to the pixel at the given position in the surface

Outputs:
- None

Additional aspects:
- The function uses Pygame's "get_at" and "set_at" methods to access and modify the color of a pixel in a surface
- The function adds a fraction of the given color to the current color of the pixel, which allows for gradual color changes rather than abrupt ones
"""

class TestMarkPixel:
    # Tests that the function correctly sets a pixel to a new color. 
    def test_mark_pixel_happy(self):
        # Happy path test
        surface = pygame.Surface((800, 800))
        pos = (400, 400)
        pcol = (50, 100, 150)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (55, 110, 160)

    # Tests that the function correctly increments each color channel by a small amount. 
    def test_mark_pixel_increment(self):
        # Happy path test
        surface = pygame.Surface((800, 800))
        pos = (400, 400)
        pcol = (10, 20, 30)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (11, 22, 33)

    # Tests that the function correctly sets a pixel at the edge of the surface. 
    def test_mark_pixel_edge(self):
        # Edge case test
        surface = pygame.Surface((800, 800))
        pos = (0, 0)
        pcol = (50, 100, 150)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (50, 100, 150)

    # Tests that the function correctly handles setting a pixel with an invalid position. 
    def test_mark_pixel_invalid_pos(self):
        # Edge case test
        surface = pygame.Surface((800, 800))
        pos = (900, 900)
        pcol = (50, 100, 150)
        with pytest.raises(IndexError):
            mark_pixel(surface, pos, pcol)

    # Tests that the function correctly handles setting a pixel with an invalid color value. 
    def test_mark_pixel_invalid_color(self):
        # Edge case test
        surface = pygame.Surface((800, 800))
        pos = (400, 400)
        pcol = (300, 400, 500)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (255, 255, 255)

    # Tests that the function works correctly with surfaces of different pixel formats. 
    def test_mark_pixel_format(self):
        # Edge case test
        surface = pygame.Surface((800, 800), flags=SRCALPHA)
        pos = (400, 400)
        pcol = (50, 100, 150)
        mark_pixel(surface, pos, pcol)
        assert surface.get_at(pos) == (55, 110, 160)